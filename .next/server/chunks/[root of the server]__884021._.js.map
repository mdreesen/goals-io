{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/mdreesen/Documents/Programming/projects/goals-io/lib/mongodb.ts"],"sourcesContent":["import mongoose from \"mongoose\";\nconst { MONGO_URI } = process.env;\nexport const connectDB = async () => {\n  try {\n    const { connection } = await mongoose.connect(MONGO_URI as string);\n    if (connection.readyState === 1) {\n      return Promise.resolve(true);\n    }\n  } catch (error) {\n    console.error(error);\n    return Promise.reject(error);\n  }\n};"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,EAAE,SAAS,EAAE,GAAG,QAAQ,GAAG;AAC1B,MAAM,YAAY;IACvB,IAAI;QACF,MAAM,EAAE,UAAU,EAAE,GAAG,MAAM,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC;QAC9C,IAAI,WAAW,UAAU,KAAK,GAAG;YAC/B,OAAO,QAAQ,OAAO,CAAC;QACzB;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC;QACd,OAAO,QAAQ,MAAM,CAAC;IACxB;AACF"}},
    {"offset": {"line": 72, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 78, "column": 0}, "map": {"version":3,"sources":["file:///Users/mdreesen/Documents/Programming/projects/goals-io/%28models%29/User.ts"],"sourcesContent":["import mongoose, { Schema } from \"mongoose\";\n\nmongoose.connect(`${process.env.MONGO_URI}`);\nmongoose.Promise = global.Promise;\n\nconst userSchema = new Schema(\n    {\n        first_name: String,\n        last_name: String,\n        email: String,\n        phone: String,\n        password: String,\n        houseNumber: String,\n        street: String,\n        city: String,\n        address_road: String,\n        address_city: String,\n        address_state: String,\n        address_street: String,\n        postalCode: String,\n        state: String,\n        county: String,\n        resetPasswordToken: String,\n        createdAt: String,\n        updatedAt: String\n    }, { timestamps: true });\n\nconst User = mongoose.models.Users || mongoose.model(\"Users\", userSchema);\nexport default User;"],"names":[],"mappings":";;;AAAA;;AAEA,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,GAAG,QAAQ,GAAG,CAAC,SAAS,EAAE;AAC3C,yGAAA,CAAA,UAAQ,CAAC,OAAO,GAAG,OAAO,OAAO;AAEjC,MAAM,aAAa,IAAI,yGAAA,CAAA,SAAM,CACzB;IACI,YAAY;IACZ,WAAW;IACX,OAAO;IACP,OAAO;IACP,UAAU;IACV,aAAa;IACb,QAAQ;IACR,MAAM;IACN,cAAc;IACd,cAAc;IACd,eAAe;IACf,gBAAgB;IAChB,YAAY;IACZ,OAAO;IACP,QAAQ;IACR,oBAAoB;IACpB,WAAW;IACX,WAAW;AACf,GAAG;IAAE,YAAY;AAAK;AAE1B,MAAM,OAAO,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,SAAS;uCAC/C"}},
    {"offset": {"line": 109, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 123, "column": 0}, "map": {"version":3,"sources":["file:///Users/mdreesen/Documents/Programming/projects/goals-io/lib/auth.ts"],"sourcesContent":["import { connectDB } from \"@/lib/mongodb\";\nimport User from \"@/(models)/User\";\nimport type { NextAuthOptions, DefaultSession, DefaultUser } from \"next-auth\";\nimport credentials from \"next-auth/providers/credentials\";\nimport bcrypt from \"bcryptjs\";\nimport { type DefaultJWT } from \"next-auth/jwt\";\n\ndeclare module \"next-auth\" {\n  \n  interface Session extends DefaultSession {\n    user: {\n      username: string; // the user will now have the property\n      _id: string;\n      email: string;\n      password: string;\n  \n      createdAt: string,\n      updatedAt: string,\n      __v: number,\n      resetPasswordToken: string,\n      resetPasswordTokenExpirationDate: Date\n    };\n  }\n\n  interface User extends DefaultUser {\n    username: string; // the user will now have the property\n    _id: string;\n    email: string;\n    password: string;\n\n    createdAt: string,\n    updatedAt: string,\n    __v: number,\n    resetPasswordToken: string,\n    resetPasswordTokenExpirationDate: Date\n  }\n}\n\ndeclare module \"next-auth/jwt\" {\n  interface JWT extends DefaultJWT {\n    username: string; // the user will now have the property\n    _id: string;\n    email: string;\n    password: string;\n\n    createdAt: string,\n    updatedAt: string,\n    __v: number,\n    resetPasswordToken: string,\n    resetPasswordTokenExpirationDate: Date\n  }\n}\n\nexport const authOptions: NextAuthOptions = {\n  providers: [\n    credentials({\n      name: \"Credentials\",\n      id: \"credentials\",\n      credentials: {\n        email: { label: \"Email\", type: \"text\" },\n        password: { label: \"Password\", type: \"password\" },\n      },\n      async authorize(credentials) {\n        await connectDB();\n        const user = await User.findOne({\n          email: credentials?.email,\n        }).select(\"+password\");\n\n        if (!user) throw new Error(\"Wrong Credentials\");\n        const passwordMatch = await bcrypt.compare(\n          credentials!.password,\n          user.password\n        );\n\n        if (!passwordMatch) throw new Error(\"Wrong Credentials\");\n        return user;\n      },\n    }),\n  ],\n  session: {\n    strategy: \"jwt\",\n  },\n  callbacks: {\n    async session({ session }) {\n      const userData = await User.findOne({ email: session.user?.email });\n\n      return {\n        ...session,\n        user: {\n          ...userData._doc,\n        }\n      };\n    },\n    async jwt({ token }) {\n      return token\n    }\n  },\n};"],"names":[],"mappings":";;;AAAA;AACA;AAEA;AACA;;;;;AAiDO,MAAM,cAA+B;IAC1C,WAAW;QACT,CAAA,GAAA,0JAAA,CAAA,UAAW,AAAD,EAAE;YACV,MAAM;YACN,IAAI;YACJ,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAO;gBACtC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,MAAM,CAAA,GAAA,gHAAA,CAAA,YAAS,AAAD;gBACd,MAAM,OAAO,MAAM,oHAAA,CAAA,UAAI,CAAC,OAAO,CAAC;oBAC9B,OAAO,aAAa;gBACtB,GAAG,MAAM,CAAC;gBAEV,IAAI,CAAC,MAAM,MAAM,IAAI,MAAM;gBAC3B,MAAM,gBAAgB,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CACxC,YAAa,QAAQ,EACrB,KAAK,QAAQ;gBAGf,IAAI,CAAC,eAAe,MAAM,IAAI,MAAM;gBACpC,OAAO;YACT;QACF;KACD;IACD,SAAS;QACP,UAAU;IACZ;IACA,WAAW;QACT,MAAM,SAAQ,EAAE,OAAO,EAAE;YACvB,MAAM,WAAW,MAAM,oHAAA,CAAA,UAAI,CAAC,OAAO,CAAC;gBAAE,OAAO,QAAQ,IAAI,EAAE;YAAM;YAEjE,OAAO;gBACL,GAAG,OAAO;gBACV,MAAM;oBACJ,GAAG,SAAS,IAAI;gBAClB;YACF;QACF;QACA,MAAM,KAAI,EAAE,KAAK,EAAE;YACjB,OAAO;QACT;IACF;AACF"}},
    {"offset": {"line": 181, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 267, "column": 0}, "map": {"version":3,"sources":["file:///Users/mdreesen/Documents/Programming/projects/goals-io/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import { authOptions } from \"@/lib/auth\";\nimport NextAuth from \"next-auth\";\nconst handler = NextAuth(authOptions);\nexport { handler as GET, handler as POST };"],"names":[],"mappings":";;;;AAAA;AACA;;;AACA,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE,6GAAA,CAAA,cAAW"}},
    {"offset": {"line": 277, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}